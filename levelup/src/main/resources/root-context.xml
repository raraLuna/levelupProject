<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:aop="http://www.springframework.org/schema/aop"
   xmlns:tx="http://www.springframework.org/schema/tx"
   xsi:schemaLocation="http://www.springframework.org/schema/beans 
   https://www.springframework.org/schema/beans/spring-beans.xsd 
   http://www.springframework.org/schema/aop 
   http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
   http://www.springframework.org/schema/tx 
   http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
   
   <bean class="org.apache.commons.dbcp.BasicDataSource" id="realDataSource" destroy-method="close">
      <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
      <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
      <property name="username" value="c##levelup" />
      <property name="password" value="levelup" />
   </bean>
   
   <!-- 2. 전달값이 ?에 적용되어 실행되는 쿼리문 확인용 로그와 ResultSet 결과값을 로그로 출력되게 하려면
      DataSource 에 로그를 연결 설정해야 함
      pom.xml 에 log4jdbc-remix 라이브러리의 클래스 사용함
      
      import net.sf.log4jdbc.Log4jdbcProxyDataSource;
      
      Log4jdbcProxyDataSource dataSource = new Log4jdbcProxyDataSource(realDataSource);
    -->
   <bean class="net.sf.log4jdbc.Log4jdbcProxyDataSource" id="dataSource">
      <constructor-arg ref="realDataSource" />
      <property name="logFormatter">
         <bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
            <property name="loggingType" value="MULTI_LINE" />
            <property name="sqlPrefix" value="[SQL] "/>
         </bean>
      </property>
   </bean>
   
   <!-- 3. dataSource 와 spring 과 mybatis 연결 설정 -->
   <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSession">
      <property name="configLocation" value="classpath:mybatis-config.xml" />
      <property name="dataSource" ref="dataSource" />
   </bean>
   
   <!-- 4. dao 에서 사용할 mybatis 객체 생성 설정 -->
   <bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSessionTemplate">
      <constructor-arg index="0" ref="sqlSession" />
   </bean>
   
   <!-- 5. 트랜잭션 관리 설정 : AOP -->
   <!-- 5-1. 트랜잭션 관리 클래스 등록 설정 : spring-jdbc  -->
   <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" 
      id="transactionManager">
      <property name="dataSource" ref="dataSource" />
   </bean>
   
   <!-- 5-2. service 에서 필요할 실행시점에서 commit 또는 rollback 이 구동되게 aop 설정 처리 -->
   <tx:advice id="txAdvice" transaction-manager="transactionManager">
      <tx:attributes>
         <tx:method name="select*" read-only="true" rollback-for="Exception" />
         <tx:method name="insert*" rollback-for="Exception" />
         <tx:method name="update*" rollback-for="Exception" />
         <tx:method name="delete*" rollback-for="Exception" />
      </tx:attributes>
   </tx:advice>
   
   <tx:annotation-driven transaction-manager="transactionManager" />
   
   <aop:config proxy-target-class="true">
      <aop:pointcut expression="execution(* com.gs.levelup..*Impl.*(..))" id="serviceMethod" />
      <aop:advisor advice-ref="txAdvice" id="transactionAdvisor" pointcut-ref="serviceMethod" />
   </aop:config>



<!-- 게임DB mariadb settings -->   


   <bean class="org.springframework.jdbc.datasource.DriverManagerDataSource" id="mariaDS">
      <property name="driverClassName" value="org.mariadb.jdbc.Driver"/>
      <property name="url" value="jdbc:mariadb://127.0.0.1:3306/evol?allowMultiQueries=true"/>
      <property name="username" value="evol"/>
      <property name="password" value="evol"/>
      
   </bean>
   
   <bean class="net.sf.log4jdbc.Log4jdbcProxyDataSource" id="dataSourceMaria">
      <constructor-arg ref="mariaDS" />
      <property name="logFormatter">
         <bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
            <property name="loggingType" value="MULTI_LINE" />
            <property name="sqlPrefix" value="[mySQL] "/>
         </bean>
      </property>
   </bean>

   <!-- 3. dataSource 와 spring 과 mybatis 연결 설정 -->
   <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionMaria">
      <property name="configLocation" value="classpath:mybatis-config-maria.xml" />
      <property name="dataSource" ref="dataSourceMaria" />
   </bean>
   
   <!-- 4. dao 에서 사용할 mybatis 객체 생성 설정 -->
   <bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSessionTemplateMaria">
      <constructor-arg index="0" ref="sqlSessionMaria" />
   </bean>
   
   <!-- 5. 트랜잭션 관리 설정 : AOP -->
   <!-- 5-1. 트랜잭션 관리 클래스 등록 설정 : spring-jdbc  -->
   <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" 
      id="transactionManagerMaria">
      <property name="dataSource" ref="dataSourceMaria" />
   </bean>
   
   <!-- 5-2. service 에서 필요할 실행시점에서 commit 또는 rollback 이 구동되게 aop 설정 처리 -->
   <tx:advice id="txAdviceMaria" transaction-manager="transactionManagerMaria">
      <tx:attributes>
         <tx:method name="select*" read-only="true" rollback-for="Exception" />
         <tx:method name="insert*" rollback-for="Exception" />
         <tx:method name="update*" rollback-for="Exception" />
         <tx:method name="delete*" rollback-for="Exception" />
      </tx:attributes>
   </tx:advice>
   
   <tx:annotation-driven transaction-manager="transactionManagerMaria" />
   
   <aop:config proxy-target-class="true">
      <aop:pointcut expression="execution(* com.gs.levelup..*Impl.*(..))" id="serviceMethodMaria" />
      <aop:advisor advice-ref="txAdviceMaria" id="transactionAdvisorMaria" pointcut-ref="serviceMethodMaria" />
   </aop:config>

	<!-- gmail설정 (mailSender bean 생성)-->
	<!-- <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"> 
     	<property name="host" value="smtp.gmail.com" />
  		<property name="port" value="587" />
 		<property name="username" value="kimjihyuk5935@gmail.com"/> 자신의 이메일 아이디
	 	<property name="password" value="qlalfqjsgh5935@"/> 자신의 비밀번호
		 보안연결 TLS과 관련된 설정
	     <property name="javaMailProperties">
		    <props>
		       <prop key="mail.smtp.starttls.enable">true</prop>
		       <prop key="mail.smtp.auth">true</prop>
		       <prop key="mail.transport.protocol">smtp</prop>
		       <prop key="mail.debug">true</prop>
		       <prop key="mail.smtp.ssl.trust">smtp.gmail.com</prop>
			   <prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
		    </props>
	     </property>
     </bean> -->
     
     <!-- 네이버 설정 -->
	     <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.naver.com" />
		<property name="port" value="465" />
		<property name="username" value="kimjihyuk_@naver.com" />
		<property name="password" value="qlalfqjsgh5935@" />
		<property name="defaultEncoding" value="utf-8" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.debug">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.smtps.ssl.checkserveridentity">true</prop>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtps.ssl.trust">*</prop>
				<prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
			</props>
		</property>
	</bean>

</beans>
